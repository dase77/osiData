b=data.frame(l[i])# unlisting
b=data.frame(l[i])[,1]# unlisting
b=as.character(b) # converting to character
b[b==""]=NA # empty to NA
b[b==" "]=NA # empty to NA
b=na.omit(b) #remove NA
b=as.character(b) # converting to character
b=str_split(b," ") # breaking the strings
b=unlist(b)
b=str_replace(b,",","") #removing comma
b=str_trim(b) #removing whitespaces
b[b==""]=NA # empty to NA
b=na.omit(b) #remove NA
c=str_detect(b, "-") #detect -
d=data.frame(b,c)
d=d[d[,2]!=TRUE,1]
d=as.character(d) # converting to character
len=length(d) #so we can set how long the data is going to be
#adding texbook code
d1=data.frame(d,rep(huh[i],len))
ls[[i]]=d1
ls
}
ls
ls=list()
for(i in 1:length(huh)){
b=data.frame(l[i])# unlisting
b=data.frame(l[i])[,1]# unlisting
b=as.character(b) # converting to character
b[b==""]=NA # empty to NA
b[b==" "]=NA # empty to NA
b=na.omit(b) #remove NA
b=as.character(b) # converting to character
b=str_split(b," ") # breaking the strings
b=unlist(b)
b=str_replace(b,",","") #removing comma
b=str_trim(b) #removing whitespaces
b[b==""]=NA # empty to NA
b=na.omit(b) #remove NA
c=str_detect(b, "-") #detect -
d=data.frame(b,c)
d=d[d[,2]!=TRUE,1]
d=as.character(d) # converting to character
len=length(d) #so we can set how long the data is going to be
#adding texbook code
d1=data.frame(d,rep(huh[i],len))
ls[[i]]=d1
ls=do.call(rbind, ls) ####merging the list of dataframes - rbindlist(ls) in the data.table package seems to be the fastet way but is masks melt from reshape
ls
}
ls=list()
for(i in 1:length(huh)){
b=data.frame(l[i])# unlisting
b=data.frame(l[i])[,1]# unlisting
b=as.character(b) # converting to character
b[b==""]=NA # empty to NA
b[b==" "]=NA # empty to NA
b=na.omit(b) #remove NA
b=as.character(b) # converting to character
b=str_split(b," ") # breaking the strings
b=unlist(b)
b=str_replace(b,",","") #removing comma
b=str_trim(b) #removing whitespaces
b[b==""]=NA # empty to NA
b=na.omit(b) #remove NA
c=str_detect(b, "-") #detect -
d=data.frame(b,c)
d=d[d[,2]!=TRUE,1]
d=as.character(d) # converting to character
len=length(d) #so we can set how long the data is going to be
#adding texbook code
d1=data.frame(d,rep(huh[i],len))
ls[[i]]=d1
}
ls
ls=list()
for(i in 1:length(huh)){
b=data.frame(l[i])# unlisting
b=data.frame(l[i])[,1]# unlisting
b=as.character(b) # converting to character
b[b==""]=NA # empty to NA
b[b==" "]=NA # empty to NA
b=na.omit(b) #remove NA
b=as.character(b) # converting to character
b=str_split(b," ") # breaking the strings
b=unlist(b)
b=str_replace(b,",","") #removing comma
b=str_trim(b) #removing whitespaces
b[b==""]=NA # empty to NA
b=na.omit(b) #remove NA
c=str_detect(b, "-") #detect -
d=data.frame(b,c)
d=d[d[,2]!=TRUE,1]
d=as.character(d) # converting to character
len=length(d) #so we can set how long the data is going to be
#adding texbook code
d1=data.frame(d,rep(huh[i],len))
ls[[i]]=d1
print(ls)
}
ls=do.call(rbind, ls)
ls
b=data.frame(l[1])# unlisting
bg
b
b=data.frame(l[i])[,1]# unlisting
b=data.frame(l[1])[,1]# unlisting
b
b=as.character(b) # converting to character
b
b[b==""]=NA # empty to NA
b[b==" "]=NA # empty to NA
b=na.omit(b) #remove NA
b
b=as.character(b) # converting to character
b=str_split(b," ") # breaking the strings
b=unlist(b)
b=str_replace(b,",","") #removing comma
b=str_trim(b) #removing whitespaces
b[b==""]=NA # empty to NA
b=na.omit(b) #remove NA
b
c=str_detect(b, "-") #detect -
c
d=data.frame(b,c)
d
d=d[d[,2]!=TRUE,1]
d
d=as.character(d) # converting to character
table(d)
data.frame(table(d))
d=data.frame(table(d))
d
class(d)
len=length(d) #so we can set how long the data is going to be
d
dim(D)
dim(e)
dim(d)
dim(d)[2]
d1=data.frame(d,rep(huh[i],dim(d)[2]))
d1=data.frame(d,rep(huh[1],dim(d)[2]))
d1=data.frame(d,rep(huh[1],dim(d)[1]))
d1
d
d=d[order(-d[,2]),]
d
ls=list()
for(i in 1:length(huh)){
b=data.frame(l[i])# unlisting
b=data.frame(l[i])[,1]# unlisting
b=as.character(b) # converting to character
b[b==""]=NA # empty to NA
b[b==" "]=NA # empty to NA
b=na.omit(b) #remove NA
b=as.character(b) # converting to character
b=str_split(b," ") # breaking the strings
b=unlist(b)
b=str_replace(b,",","") #removing comma
b=str_trim(b) #removing whitespaces
b[b==""]=NA # empty to NA
b=na.omit(b) #remove NA
c=str_detect(b, "-") #detect -
d=data.frame(b,c)
d=d[d[,2]!=TRUE,1]
d=as.character(d) # converting to character
d=data.frame(table(d))
d=d[order(-d[,2]),]
len=length(d) #so we can set how long the data is going to be
#adding predmet
d1=data.frame(d,rep(huh[i],dim(d)[1]))
ls[[i]]=d1
ls
}
ls
ls=list()
for(i in 1:length(huh)){
b=data.frame(l[i])# unlisting
b=data.frame(l[i])[,1]# unlisting
b=as.character(b) # converting to character
b[b==""]=NA # empty to NA
b[b==" "]=NA # empty to NA
b=na.omit(b) #remove NA
b=as.character(b) # converting to character
b=str_split(b," ") # breaking the strings
b=unlist(b)
b=str_replace(b,",","") #removing comma
b=str_trim(b) #removing whitespaces
b[b==""]=NA # empty to NA
b=na.omit(b) #remove NA
c=str_detect(b, "-") #detect -
d=data.frame(b,c)
d=d[d[,2]!=TRUE,1]
d=as.character(d) # converting to character
d=data.frame(table(d))
d=d[order(-d[,2]),]
len=length(d) #so we can set how long the data is going to be
#adding predmet
d1=data.frame(d,rep(huh[i],dim(d)[1]))
ls[[i]]=d1
print(ls)
}
shiny::runApp()
l
shiny::runApp()
l
ls=list()
b=data.frame(l[i])# unlisting
b=data.frame(l[1])# unlisting
b=data.frame(l[i])[,1]# unlisting
b=data.frame(l[1])[,1]# unlisting
b
b=as.character(b) # converting to character
b[b==""]=NA # empty to NA
b[b==" "]=NA # empty to NA
b=na.omit(b) #remove NA
b=as.character(b) # converting to character
b=str_split(b," ") # breaking the strings
b=unlist(b)
b=str_replace(b,",","") #removing comma
b=str_trim(b) #removing whitespaces
b[b==""]=NA # empty to NA
b=na.omit(b) #remove NA
b
c=str_detect(b, "-") #detect -
d=data.frame(b,c)
d
d=d[d[,2]!=TRUE,1]
d
d=as.character(d) # converting to character
d
d=data.frame(table(d))
d
d=d[order(-d[,2]),]
d
ls=list()
for(i in 1:length(huh)){
b=data.frame(l[i])# unlisting
b=data.frame(l[i])[,1]# unlisting
b=as.character(b) # converting to character
b[b==""]=NA # empty to NA
b[b==" "]=NA # empty to NA
b=na.omit(b) #remove NA
b=as.character(b) # converting to character
b=str_split(b," ") # breaking the strings
b=unlist(b)
b=str_replace(b,",","") #removing comma
b=str_trim(b) #removing whitespaces
b[b==""]=NA # empty to NA
b=na.omit(b) #remove NA
c=str_detect(b, "-") #detect -
d=data.frame(b,c)
d=d[d[,2]!=TRUE,1]
d=as.character(d) # converting to character
d=data.frame(table(d))
d=d[order(-d[,2]),]
len=length(d) #so we can set how long the data is going to be
#adding predmet
d1=data.frame(d,rep(huh[i],dim(d)[1]))
ls[[i]]=d1
}
print(ls)
shiny::runApp()
data
data2=data[!is.na(data[,8+1]),]
data2=data.frame(data2[,8+1],data2[,3])
data2
names(data2)
huh=levels(data2[,2])
l=lapply(huh,function(x)data2[data2[,2]==x,])
l
shiny::runApp()
l
l
dim(l)
length(l)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
l
l[,4]
l[4]
dim(l[4])
length(l[4])
shiny::runApp()
shiny::runApp()
shiny::runApp()
l
shiny::runApp()
l
b=data.frame(l[4])# unlisting
b=data.frame(l[4])[,1]# unlisting
b=as.character(b) # converting to character
b[b==""]=NA # empty to NA
b[b==" "]=NA # empty to NA
b=na.omit(b) #remove NA
b=as.character(b) # converting to character
b=str_split(b," ") # breaking the strings
b=unlist(b)
b=str_replace(b,",","") #removing comma
b=str_trim(b) #removing whitespaces
b[b==""]=NA # empty to NA
b=na.omit(b) #remove NA
c=str_detect(b, "-") #detect -
d=data.frame(b,c)
d=d[d[,2]!=TRUE,1]
d=as.character(d) # converting to character
d=data.frame(table(d))
d=d[order(-d[,2]),]
len=length(d) #so we can set how long the data is going to be
#adding predmet
d1=data.frame(d,rep(huh[i],dim(d)[1]))
d1
ls=list()
for(i in 1:length(huh)){
b=data.frame(l[4])# unlisting
b=data.frame(l[4])[,1]# unlisting
b=as.character(b) # converting to character
b[b==""]=NA # empty to NA
b[b==" "]=NA # empty to NA
b=na.omit(b) #remove NA
b=as.character(b) # converting to character
b=str_split(b," ") # breaking the strings
b=unlist(b)
b=str_replace(b,",","") #removing comma
b=str_trim(b) #removing whitespaces
b[b==""]=NA # empty to NA
b=na.omit(b) #remove NA
c=str_detect(b, "-") #detect -
d=data.frame(b,c)
d=d[d[,2]!=TRUE,1]
d=as.character(d) # converting to character
d=data.frame(table(d))
d=d[order(-d[,2]),]
len=length(d) #so we can set how long the data is going to be
#adding predmet
d1=data.frame(d,rep(huh[i],dim(d)[1]))
ls[i]=d1
}
print(ls)
ls=list()
for(i in 1:length(huh)){
b=data.frame(l[4])# unlisting
b=data.frame(l[4])[,1]# unlisting
b=as.character(b) # converting to character
b[b==""]=NA # empty to NA
b[b==" "]=NA # empty to NA
b=na.omit(b) #remove NA
b=as.character(b) # converting to character
b=str_split(b," ") # breaking the strings
b=unlist(b)
b=str_replace(b,",","") #removing comma
b=str_trim(b) #removing whitespaces
b[b==""]=NA # empty to NA
b=na.omit(b) #remove NA
c=str_detect(b, "-") #detect -
d=data.frame(b,c)
d=d[d[,2]!=TRUE,1]
d=as.character(d) # converting to character
d=data.frame(table(d))
d=d[order(-d[,2]),]
len=length(d) #so we can set how long the data is going to be
#adding predmet
d1=data.frame(d,rep(huh[i],dim(d)[1]))
ls[[i]]=d1
}
print(ls)
ls=list()
for(i in 1:length(huh)){
b=data.frame(l[4])# unlisting
b=data.frame(l[4])[,1]# unlisting
b=as.character(b) # converting to character
b[b==""]=NA # empty to NA
b[b==" "]=NA # empty to NA
b=na.omit(b) #remove NA
b=as.character(b) # converting to character
b=str_split(b," ") # breaking the strings
b=unlist(b)
b=str_replace(b,",","") #removing comma
b=str_trim(b) #removing whitespaces
b[b==""]=NA # empty to NA
b=na.omit(b) #remove NA
c=str_detect(b, "-") #detect -
d=data.frame(b,c)
d=d[d[,2]!=TRUE,1]
d=as.character(d) # converting to character
d=data.frame(table(d))
d=d[order(-d[,2]),]
len=length(d) #so we can set how long the data is going to be
#adding predmet
d1=data.frame(d,rep(huh[i],dim(d)[1]))
ls[[i]]=d1
}
ls=do.call(rbind, ls) ####merging the list of dataframes - rbindlist(ls) in the data.table package seems to be
#the fastet way but is masks melt from reshape
print(ls)
names(ls)
ls=list()
for(i in 1:length(huh)){
b=data.frame(l[4])# unlisting
b=data.frame(l[4])[,1]# unlisting
b=as.character(b) # converting to character
b[b==""]=NA # empty to NA
b[b==" "]=NA # empty to NA
b=na.omit(b) #remove NA
b=as.character(b) # converting to character
b=str_split(b," ") # breaking the strings
b=unlist(b)
b=str_replace(b,",","") #removing comma
b=str_trim(b) #removing whitespaces
b[b==""]=NA # empty to NA
b=na.omit(b) #remove NA
c=str_detect(b, "-") #detect -
d=data.frame(b,c)
d=d[d[,2]!=TRUE,1]
d=as.character(d) # converting to character
d=data.frame(table(d))
d=d[order(-d[,2]),]
len=length(d) #so we can set how long the data is going to be
#adding predmet
d1=data.frame(d,rep(huh[i],dim(d)[1]))
ls[[i]]=d1
}
ls=do.call(rbind, ls) ####merging the list of dataframes - rbindlist(ls) in the data.table package seems to be
#the fastet way but is masks melt from reshape
names(ls)=c("Sadržaji","Frekvencija","Predmet")
print(ls)
levels(data$Predmet)[2]="Vjeronauka"
data=read.csv("historija (copy).csv",sep=";",na.strings=c(" ","","\"\"","NA","N/A")) # load tha data
geografija=read.csv("geografija.csv",sep=";",na.strings=c(" ","","\"\"","NA","N/A")) # load tha data
vjeronauk=read.csv("vjeronauk.csv",sep=";",na.strings=c(" ","","\"\"","NA","N/A")) # load tha data
knjizevnost=read.csv("V5baza_jezik i knjizevnost_cijela.csv",sep=";",na.strings=c(" ","","\"\"","NA","N/A")) # load tha data
levels(knjizevnost$Negativni.oblici.ponašanja)[c(3)]=c("Ne")
knjizevnost=knjizevnost[,-27]
names(vjeronauk)=names(data) # same names in order to merge data
names(geografija)=names(data) # same names in order to merge data
names(knjizevnost)=names(data) # same names in order to merge data
data=rbind(data,vjeronauk,geografija,knjizevnost)
levels(data$Negativni.oblici.ponašanja)[c(3,4)]=c("Da","Ne")
levels(data$Univerzalne.vrijednosti)[c(3,4)]=c("Da","Ne")
levels(data$Predmet)[2]="Vjeronauka"
data[,5]=factor(data[,5],labels=c("šesti","sedmi","osmi","deveti"))
data[,4]=as.character(data[,4])
data[,7]=as.character(data[,7])
data2=data1[!is.na(data1[,8+1]),]
data2=data[!is.na(data[,8+1]),]
data2=data.frame(data2[,8+1],data2[,3])
data2
huh=levels(data2[,2])
huh
l=lapply(huh,function(x) data2[data2[,2]==x,])
l
ls=list()
for(i in 1:length(huh)){
b=data.frame(l[4])# unlisting
b=data.frame(l[4])[,1]# unlisting
b=as.character(b) # converting to character
b[b==""]=NA # empty to NA
b[b==" "]=NA # empty to NA
b=na.omit(b) #remove NA
b=as.character(b) # converting to character
b=str_split(b," ") # breaking the strings
b=unlist(b)
b=str_replace(b,",","") #removing comma
b=str_trim(b) #removing whitespaces
b[b==""]=NA # empty to NA
b=na.omit(b) #remove NA
c=str_detect(b, "-") #detect -
d=data.frame(b,c)
d=d[d[,2]!=TRUE,1]
d=as.character(d) # converting to character
d=data.frame(table(d))
d=d[order(-d[,2]),]
len=length(d) #so we can set how long the data is going to be
#adding predmet
d1=data.frame(d,rep(huh[i],dim(d)[1]))
ls[[i]]=d1
}
ls=do.call(rbind, ls) ####merging the list of dataframes - rbindlist(ls) in the data.table package seems to be
#the fastet way but is masks melt from reshape
names(ls)=c("Sadržaji","Frekvencija","Predmet")
print(ls)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
names(data)
dim(data)
data[,12]
data[,13]
lelevs(data[,13])
levels(data[,13])
shiny::runApp()
levels(data[,13])
names(data)
levels(data[,13])
table(levels(data[,13]))
data.frame(table(levels(data[,13])))
shiny::runApp()
shiny::runApp()
data[,12]
levels(data[,12])
shiny::runApp()
shiny::runApp()
data[,14]
shiny::runApp()
shiny::runApp()
shiny::runApp()
